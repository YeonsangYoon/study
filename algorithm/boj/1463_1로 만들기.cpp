/**********************************************************************
작성일 : 2022-7-14
문제 :
	정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지이다.
		- X가 3으로 나누어 떨어지면, 3으로 나눈다.
		- X가 2로 나누어 떨어지면, 2로 나눈다.
		- 1을 뺀다.
	이때, 정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용하여 1을 만들려한다.
	연산을 사용하는 횟수의 최솟값을 출력하라.
풀이 :
	재귀를 이용하여 구하면 스택오버플로우가 발생한다.
	이를 해결하기 위해 메모이제이션을 활용한 dp를 구현하였다.
시간 제한 : 0.15초
메모리 제한 : 128MB
예상 시간복잡도 : O(n)
TEST 결과 : 통과
**********************************************************************/
#include <bits/stdc++.h>
#define fastio ios::sync_with_stdio(0), cout.tie(0), cin.tie(0)
using namespace std;

int n;
int dp[1000001];

void init() {
	cin >> n;
	for (int i = 1; i < n; i++)
		dp[i] = INT_MAX;
	dp[n] = 0;
}

int main(void) {
	fastio;
	init();

	for (int i = n; i >= 1; i--) {
		dp[i - 1] = min(dp[i - 1], dp[i] + 1);
		
		if (i % 2 == 0)
			dp[i / 2] = min(dp[i / 2], dp[i] + 1);
		if (i % 3 == 0)
			dp[i / 3] = min(dp[i / 3], dp[i] + 1);
	}
	cout << dp[1];
}